# -*- coding: utf-8 -*-
"""Tutorial_colab_pytorch_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16z85IL-twE-K6cE-xNdtd_N919ABXOfG

## 【Google Colab系列】圖片分類遷移學習
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
!nvidia-smi

from google.colab import drive 

#掛載雲端硬碟
drive.mount('/content/gdrive')

# License: BSD
# Author: Grady.Huang 
# Date: 2020.03.28

from __future__ import print_function, division
import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy
import cv2

print("Import all lib start !" )

plt.ion()

"""### Step1 確認資料目錄路徑"""

# Commented out IPython magic to ensure Python compatibility.
!ls
# %cd gdrive/My\ Drive/Colab Notebooks/Tutorial_colab_pytorch_classification
!ls

"""### Step2 載入訓練/驗證/測試資料集"""

def imshow(inp, title=None):
    """Imshow for Tensor."""
    inp = inp.numpy().transpose((1, 2, 0))
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    inp = std * inp + mean
    inp = np.clip(inp, 0, 1)
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001) 


# 取batch中訓練資料圖片
inputs, classes = next(iter(dataloaders['train']))
out = torchvision.utils.make_grid(inputs)

imshow(out, title=[class_names[x] for x in classes])

"""### Step3 設定訓練模型參數"""

def train_model(model, criterion, optimizer, scheduler, num_epochs=20):
    since = time.time()

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # 每個 epoch 訓練/驗證階段
        for phase in ['train', 'val']:
            if phase == 'train':
                scheduler.step()
                model.train()  # 設定模型訓練模式
            else:
                model.eval()   # 設定模型驗證模式

            running_loss = 0.0
            running_corrects = 0

            # 每一批訓練資料Iterate
            for inputs, labels in dataloaders[phase]:
                inputs = inputs.to(device)
                labels = labels.to(device)

                # gradients 參數=0
                optimizer.zero_grad()

                # forward
                # 紀錄訓練階段loss
                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize 訓練階段更新優化模型參數
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # 統計驗證結果
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)

            epoch_loss = running_loss / dataset_sizes[phase]
            epoch_acc = running_corrects.double() / dataset_sizes[phase]

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                phase, epoch_loss, epoch_acc))

            # 複製最好的模型參數資料
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())


    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(
        time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # 放入最好的模型參數輸出回傳
    model.load_state_dict(best_model_wts)
    return model

"""### Step4 顯示模型預測結果"""

def visualize_model(model, num_images=6):
    was_training = model.training
    model.eval()
    images_so_far = 0
    fig = plt.figure()

    with torch.no_grad():
        for i, (inputs, labels) in enumerate(dataloaders['val']):
            inputs = inputs.to(device)
            labels = labels.to(device)

            outputs = model(inputs)
            _, preds = torch.max(outputs, 1)

            for j in range(inputs.size()[0]):
                images_so_far += 1
                ax = plt.subplot(num_images//2, 2, images_so_far)
                ax.axis('off')
                ax.set_title('predicted: {}'.format(class_names[preds[j]]))
                imshow(inputs.cpu().data[j])

                if images_so_far == num_images:
                    model.train(mode=was_training)
                    return
        model.train(mode=was_training)

"""### Step5 設定模型訓練類別數量"""

model_ft = models.resnet18(pretrained=True)
num_ftrs = model_ft.fc.in_features

#分類輸出類別數量
model_ft.fc = nn.Linear(num_ftrs, 5)

model_ft = model_ft.to(device)

criterion = nn.CrossEntropyLoss()

# Observe that all parameters are being optimized
optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,num_epochs=20)

visualize_model(model_ft)

"""### Step5 凍結特徵提取模型參數

凍結設定方式 ``requires_grad == False`` 所有特徵提取參數皆不會做gradients 的計算``backward()``
"""

model_conv = torchvision.models.resnet18(pretrained=True)
for param in model_conv.parameters():
    param.requires_grad = False

# Parameters of newly constructed modules have requires_grad=True by default
num_ftrs = model_conv.fc.in_features
model_conv.fc = nn.Linear(num_ftrs, 5)

model_conv = model_conv.to(device)

criterion = nn.CrossEntropyLoss()

# Observe that only parameters of final layer are being optimized as
# opoosed to before.
optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)

model_conv = train_model(model_conv, criterion, optimizer_conv,
                         exp_lr_scheduler, num_epochs=20)

visualize_model(model_conv)

plt.ioff()
plt.show()

"""### Step6 遷移訓練模型匯出"""

!ls
def save_model(model,model_name):
  model_path='final_model/'
  final_path=model_path+model_name+'_.pkl'
  print(final_path)
  torch.save(model,final_path)
  print("Model success ")

save_model(model_ft,'gamania_ft_test1')
save_model(model_conv,'gamania_conv_test1')

"""### Step7 載入模型"""

#載入fine tune模型
model_path='final_model/gamania_ft_test1_.pkl'
model_gamania=torch.load(model_path)

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
model_gamania = model_gamania.to(device) #CPU or GPU

#推論模式
model_gamania.eval()
print(model_gamania)

"""### Step8 推論測試"""

def testing_model(model,num_images=16):
    
    model.eval()
    stop_sohw=False 
    images_so_far = 0
    testing_corrects =0

    with torch.no_grad():
        for i, (inputs, labels) in enumerate(test_dataloaders['test']):
            inputs = inputs.to(device)
            labels = labels.to(device)

            outputs = model(inputs)
            print(outputs)
            _, preds = torch.max(outputs, 1)
            
            testing_corrects += torch.sum(preds == labels.data)
            if stop_sohw!=True:
              for j in range(inputs.size()[0]):
                  images_so_far += 1
                  ax = plt.subplot(num_images//4, 4, images_so_far)
                  ax.axis('off')
                  ax.set_title('Test predicted: {}'.format(class_names[preds[j]]))
                  imshow(inputs.cpu().data[j])
            
            if images_so_far == num_images:
              stop_sohw=True 

        testing_acc = testing_corrects.double() / dataset_sizes['test']
        
        print('Total testing Acc: {:4f}'.format(testing_acc))

testing_model(model_gamania)
plt.ioff()
plt.show()

